// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  USER
  MENTOR
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  firstName     String?
  middleName    String?
  lastName      String?
  college       String?
  branch        String?
  year          Int?
  contact       BigInt?
  accounts      Account[]
  sessions      Session[]
  role          UserRole  @default(USER)
  wishlist      Project[]
  team          Team[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id             String   @id @default(cuid())
  title          String
  description    String
  paidProject    Boolean
  features       String?
  components     String?
  implementation String?
  skills         String?
  company        String
  relatedInfo    String?
  specifications String?
  videoLink      String?
  tags           String[]
  images         String[]
  categories     String[]
  User           User[]
  Team           Team[]
}

model Team {
  id                  String   @id @default(cuid())
  referral_code       String   @unique
  college             String
  year                Int
  leader              String   @unique
  mentor              String?
  members             User[]
  // memberIds     String    @relation()
  project             Project  @relation(fields: [projectId], references: [id])
  projectId           String
  status              Int      @default(0)
  appliedAt           DateTime @default(now())
  milestone1          String[]
  milestone1LinkCheck Boolean
  milestone2          String[]
  milestone2LinkCheck Boolean
  milestone3          String[]
  milestone3LinkCheck Boolean
  milestone4          String[]
  milestone4LinkCheck Boolean
  milestone5          String[]
  milestone5LinkCheck Boolean
  milestone6          String[]
  milestone6LinkCheck Boolean
  presentMilestone    Int
  approvedMilestone   Int
  payment_status      Boolean  @default(false)
  order               Order[]
  orderStatus         Boolean? @default(false)
}

model College {
  code String @id @unique
  name String
}

model Order {
  id        String   @id @unique @default(cuid())
  paymentId String?
  teamId    String
  team      Team     @relation(fields: [teamId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    Boolean
  payee     String
}
